{"version":3,"sources":["components/PersonLink.tsx","components/PeoplePage.tsx","api.ts","App.tsx","index.tsx"],"names":["PersonLink","person","search","useLocation","to","pathname","slug","className","classNames","sex","name","PeoplePage","useState","people","setPeople","useSearchParams","searchParams","setSearchParams","get","query","useParams","useEffect","fetch","then","r","json","peopleFromServer","preparedPeople","map","p","forEach","Object","assign","mother","find","m","motherName","father","f","fatherName","sortType","setSortType","isSorted","setIsSorted","sortBy","sortParam","visiblePeople","getSearchWith","params","copy","URLSearchParams","toString","keys","key","set","delete","sort","item1","item2","localeCompare","born","length","type","placeholder","value","onChange","event","target","sortPart","sortOrder","onClick","src","alt","died","getActiveClasses","status","isActive","App","location","path","element","index","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.36c7c706.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { FC } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Person } from '../types/Person';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: FC<Props> = ({ person }) => {\n  const { search } = useLocation();\n\n  return (\n    <Link\n      to={{\n        pathname: `/people/${person.slug}`,\n        search,\n      }}\n      className={classNames({\n        'has-text-danger': person.sex === 'f',\n      })}\n    >\n      {person.name}\n    </Link>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Link, useParams, useSearchParams } from 'react-router-dom';\n\nimport { getPeople } from '../api';\nimport { Person } from '../types/Person';\nimport { PersonLink } from './PersonLink';\n\nimport './PeoplePage.scss';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const sex = searchParams.get('sex');\n  const query = searchParams.get('query') || '';\n\n  const { slug } = useParams();\n\n  useEffect(() => {\n    getPeople()\n      .then(peopleFromServer => {\n        const preparedPeople = peopleFromServer.map(p => ({ ...p }));\n\n        preparedPeople.forEach(person => {\n          Object.assign(person, {\n            mother: preparedPeople.find(m => m.name === person.motherName)\n              || null,\n            father: preparedPeople.find(f => f.name === person.fatherName)\n              || null,\n          });\n        });\n\n        setPeople(preparedPeople);\n      });\n  }, []);\n\n  const [sortType, setSortType] = useState('');\n  const [isSorted, setIsSorted] = useState(false);\n\n  const sortBy = (sortParam: string) => {\n    setSortType(sortParam);\n    setIsSorted(!isSorted);\n  };\n\n  const sort = (arr: Person[]) => {\n    arr.sort((item1, item2) => {\n      switch (sortType) {\n        case 'name':\n          return (\n            isSorted ? (\n              item1.name.localeCompare(item2.name)\n            ) : (\n              item2.name.localeCompare(item1.name)\n            )\n          );\n        case 'sex':\n          return (\n            isSorted ? (\n              item1.sex.localeCompare(item2.sex)\n            ) : (\n              item2.sex.localeCompare(item1.sex)\n            )\n          );\n        case 'born':\n          return (\n            isSorted ? (\n              item1.born - item2.born\n            ) : (\n              item2.born - item1.born\n            )\n          );\n        case 'died':\n          return (\n            isSorted ? (\n              item1.born - item2.born\n            ) : (\n              item2.born - item1.born\n            )\n          );\n        default:\n          return 0;\n      }\n    });\n  };\n\n  const visiblePeople = people;\n\n  sort(visiblePeople);\n\n  type Params = {\n    [key: string]: string,\n  };\n\n  function getSearchWith(params: Params): string {\n    const copy = new URLSearchParams(\n      searchParams.toString(), // ?query=abc&sex=m\n    );\n\n    // eslint-disable-next-line no-restricted-syntax\n    for (const key of Object.keys(params)) {\n      if (params[key]) {\n        copy.set(key, params[key]);\n      } else {\n        copy.delete(key);\n      }\n    }\n\n    return copy.toString();\n  }\n\n  return (\n    <>\n      <h1 className=\"title\">People page</h1>\n      {visiblePeople.length}\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-4-desktop\">\n            <nav className=\"panel\">\n              <p className=\"panel-heading\">\n                Filters\n              </p>\n\n              <p className=\"panel-tabs\">\n                <Link\n                  to={{ search: getSearchWith({ sex: '' }) }}\n                  className={classNames({ 'is-active': !sex })}\n                >\n                  All\n                </Link>\n\n                <Link\n                  to={{ search: getSearchWith({ sex: 'm' }) }}\n                  className={classNames({ 'is-active': sex === 'm' })}\n                >\n                  Male\n                </Link>\n\n                <Link\n                  to={{ search: getSearchWith({ sex: 'f' }) }}\n                  className={classNames({ 'is-active': sex === 'f' })}\n                >\n                  Female\n                </Link>\n              </p>\n\n              <div className=\"panel-block\">\n                <p className=\"control has-icons-left\">\n                  <input\n                    className=\"input\"\n                    type=\"text\"\n                    placeholder=\"Search\"\n                    value={query}\n                    onChange={event => setSearchParams(\n                      getSearchWith({ query: event.target.value }),\n                    )}\n                  />\n                  <span className=\"icon is-left\">\n                    <i className=\"fas fa-search\" aria-hidden=\"true\" />\n                  </span>\n                </p>\n              </div>\n\n              <div className=\"panel-block is-flex-direction-column\">\n                <div className=\"buttons is-justify-content-center\">\n                  <button type=\"button\" className=\"button\">16</button>\n                  <button type=\"button\" className=\"button\">17</button>\n                  <button type=\"button\" className=\"button\">18</button>\n                  <button type=\"button\" className=\"button\">19</button>\n                  <button type=\"button\" className=\"button\">20</button>\n                  <button type=\"button\" className=\"button is-success\">\n                    Show All\n                  </button>\n                </div>\n              </div>\n\n              <div className=\"panel-block\">\n                <button\n                  type=\"button\"\n                  className=\"button is-link is-outlined is-fullwidth\"\n                >\n                  Reset all filters\n                </button>\n              </div>\n            </nav>\n          </div>\n\n          <div className=\"column\">\n            <table className=\"table is-striped is-narrow box\">\n              <thead>\n                <tr>\n                  <th className=\"title_table\">\n                    Name\n                    <br />\n                    <Link\n                      to={\n                        {\n                          search: getSearchWith(isSorted ? (\n                            { sortPart: 'Name', sortOrder: 'desc' }\n                          ) : (\n                            { sortPart: 'Name', sortOrder: 'asc' }\n                          )),\n                        }\n                      }\n                    >\n                      <button\n                        className=\"button is-small sort\"\n                        type=\"button\"\n                        onClick={() => {\n                          sortBy('name');\n                        }}\n                      >\n                        <span className=\"icon is-small\">\n                          <img src=\"images/sort_both.png\" alt=\"sort\" />\n                        </span>\n                      </button>\n                    </Link>\n                  </th>\n\n                  <th>\n                    Sex\n                    <Link\n                      to={\n                        {\n                          search: getSearchWith(isSorted ? (\n                            { sortPart: 'Sex', sortOrder: 'desc' }\n                          ) : (\n                            { sortPart: 'Sex', sortOrder: 'asc' }\n                          )),\n                        }\n                      }\n                    >\n                      <button\n                        className=\"button is-small sort\"\n                        type=\"button\"\n                        onClick={() => {\n                          sortBy('sex');\n                        }}\n                      >\n                        <span className=\"icon is-small\">\n                          <img src=\"images/sort_both.png\" alt=\"sort\" />\n                        </span>\n                      </button>\n                    </Link>\n\n                  </th>\n\n                  <th>\n                    Born\n                    <Link\n                      to={\n                        {\n                          search: getSearchWith(isSorted ? (\n                            { sortPart: 'Born', sortOrder: 'desc' }\n                          ) : (\n                            { sortPart: 'Born', sortOrder: 'asc' }\n                          )),\n                        }\n                      }\n                    >\n                      <button\n                        className=\"button is-small sort\"\n                        type=\"button\"\n                        onClick={() => {\n                          sortBy('born');\n                        }}\n                      >\n                        <span className=\"icon is-small\">\n                          <img src=\"images/sort_both.png\" alt=\"sort\" />\n                        </span>\n                      </button>\n                    </Link>\n                  </th>\n\n                  <th>\n                    Died\n                    <Link\n                      to={\n                        {\n                          search: getSearchWith(isSorted ? (\n                            { sortPart: 'Died', sortOrder: 'desc' }\n                          ) : (\n                            { sortPart: 'Died', sortOrder: 'asc' }\n                          )),\n                        }\n                      }\n                    >\n                      <button\n                        className=\"button is-small sort\"\n                        type=\"button\"\n                        onClick={() => {\n                          sortBy('died');\n                        }}\n                      >\n                        <span className=\"icon is-small\">\n                          <img src=\"images/sort_both.png\" alt=\"sort\" />\n                        </span>\n                      </button>\n                    </Link>\n                  </th>\n\n                  <th>Mother</th>\n                  <th>Father</th>\n                </tr>\n              </thead>\n              <tbody>\n                {visiblePeople.map(person => (\n                  <tr\n                    key={person.slug}\n                    className={classNames('person', {\n                      'has-background-warning': person.slug === slug,\n                    })}\n                  >\n                    <td>\n                      <PersonLink person={person} />\n                    </td>\n                    <td>{person.sex}</td>\n                    <td>{person.born}</td>\n                    <td>{person.died}</td>\n                    <td>\n                      {person.mother ? (\n                        <PersonLink person={person.mother} />\n                      ) : person.motherName}\n                    </td>\n                    <td>\n                      {person.father ? (\n                        <PersonLink person={person.father} />\n                      ) : person.fatherName}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { Person } from './types/Person';\n\nconst url = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nexport function getPeople(): Promise<Person[]> {\n  return fetch(url)\n    .then(r => r.json());\n}\n","import 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport {\n  Navigate, NavLink, Route, Routes, useLocation,\n} from 'react-router-dom';\nimport classNames from 'classnames';\nimport { PeoplePage } from './components/PeoplePage';\n\ntype Status = { isActive: boolean };\n\nconst getActiveClasses = (status: Status) => classNames(\n  'navbar-item',\n  { 'has-background-grey-lighter': status.isActive },\n);\n\nexport const App = () => {\n  const location = useLocation();\n\n  return (\n    <>\n      <nav\n        className=\"navbar is-fixed-top has-background-light\"\n        data-cy=\"nav\"\n      >\n        <div className=\"navbar-menu container\">\n          <div className=\"navbar-start\">\n            <NavLink to=\"/\" className={getActiveClasses}>\n              Home\n            </NavLink>\n\n            <NavLink\n              to={{\n                pathname: 'people',\n                search: location.search,\n              }}\n              className={getActiveClasses}\n            >\n              People\n            </NavLink>\n          </div>\n        </div>\n      </nav>\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route path=\"/\" element={<h1 className=\"title\">Home Page</h1>} />\n            <Route path=\"home\" element={<Navigate to=\"/\" />} />\n            <Route path=\"people\">\n              <Route index element={<PeoplePage />} />\n              <Route path=\":slug\" element={<PeoplePage />} />\n            </Route>\n            <Route\n              path=\"*\"\n              element={<h1 className=\"title\">Page not found</h1>}\n            />\n          </Routes>\n        </div>\n      </div>\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}